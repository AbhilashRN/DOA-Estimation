%Optimal SMI beamformer
clc; clear; close all;

M       = 16;          % Number of Array Elements.
K1      = 200;       % Number of Signal Snapshots for Test Case #1.
MC_Runs = 25;         % Number of Monte-Carlo Runs.

lambda  = 1;           % Incoming Signal Wavelength in (m).
d       = lambda/2;    % Interelement Distance in (m).
phi_s   = -30;           % Target azimuth angle in degrees
sigma_s = 1/sqrt(M);   % Target signal power so that M*sigma_s^2 = 1;

phi_i   = 45;          % interference angle in degrees
INR     = 40;          % Interference #1 INR in dBs

u_s = (d/lambda)*sin(phi_s*pi/180);        % Target Normalized Spatial Frequency.
u_i = (d/lambda)*sin(phi_i*pi/180);        % Interferer Normalized Spatial Frequency.
v_s = exp(-1i*2*pi*u_s*(0:M-1).')/sqrt(M); % Target Steering Vector.
v_i = exp(-1i*2*pi*u_i*(0:M-1).')/sqrt(M); % Interferer Steering Vector.

% Take 100 realizations of sample matrices R1, R2, R3 and R4 and average to
% find smoother SINR loss curves:

angle = -90:1:90;
NSamples = length(angle);
SINR_Opt = zeros(NSamples,1);
SINR1    = zeros(NSamples,1);  SINR_1 = zeros(NSamples,1);

R_ipn = (10^(INR/10))*(v_i*v_i') + eye(M);
InvR = inv(R_ipn);

c_opt  = InvR*v_s/(v_s'*InvR*v_s);

%Monte Carlo Runsfor adaptive SMI
c_smi1 = zeros(M,1);
 for k=1:MC_Runs
    % Uncorrelated unit power thermal noise samples drawn from a complex Gaussian distribution:
    w1 = (randn(M,K1) + 1i*randn(M,K1))/sqrt(2);    
    % The interference (jammer) vector are generated by:
    i_x1=(10^(INR/20))*v_i*(randn(1,K1) + 1i*randn(1,K1))/sqrt(2);   
    % The sample interference-plus-noise signal x_i+n is generated by:
    iplusn1 = i_x1 + w1;
    % Sample Autocirrelation Matrices:
    R1 = 1/K1*(iplusn1*iplusn1');
    InvR1 = inv(R1);
    %#ok<*MINV>
    c_smi1 =c_smi1+ InvR1*v_s/(v_s'*InvR1*v_s);  % SMI Beamformer computed for phi_s = 0 deg & K1 = 1.5*M snapshots.  
end
c_smi1 = 1/MC_Runs*c_smi1;

Opt_Beam_Pat  = zeros(NSamples,1);
SMI_Beam_Pat1 = zeros(NSamples,1);
for k=1:NSamples
    u = (d/lambda)*sin(angle(k)*pi/180);
    v = exp(-1i*2*pi*u*(0:M-1).')/sqrt(M); % Azimuth Scanning Steering Vector.
    Opt_Beam_Pat(k)   = c_opt'*v;
    SMI_Beam_Pat1(k) = c_smi1'*v;
 end


plot(angle,10*log10(abs(Opt_Beam_Pat).^2),angle,10*log10(abs(SMI_Beam_Pat1).^2),'r', 'LineWidth',1.5);
title([
    'Optimum MVDR (blue) and SMI Beamformer (red).';]);
xlim([-90 90]);
ylim([-80 5]);
grid on;
xlabel('Angle (deg)');
ylabel('Power (dB)');


figure();

subplot(1,2,1);
polardb(angle.'*pi/180,10*log10(abs(SMI_Beam_Pat1).^2),-80,'b');
title('SMI BF');
grid on;

subplot(1,2,2);
polardb(angle.'*pi/180,10*log10(abs(Opt_Beam_Pat).^2),-80,'r');
title('MVDR Optimum BF');
grid on;