%optimal MVDR Beamformer
clc; clear; close all;

M      = 16;     % Number of Array Elements.
N      = 200;    % Number of Signal Samples.
n      = 1:N;    % Time Sample Index Vector.
lambda = 1;      % Incoming Signal Wavelength in (m).
d = lambda/2;    % Interelement Distance in (m).
SNR    = 20;     % Target SNR in dBs.
phi_s  = -30;      % Target azimuth angle in degrees.
phi_i1 = 45;     % Interference angle in degrees.
INR1   = 35;     % Interference #1 INR in dBs.

u_s    = (d/lambda)*sin(phi_s*pi/180);   % Normalized Spatial Frequency of the Target signal.
u_int1 = (d/lambda)*sin(phi_i1*pi/180);  % Normalized Spatial Frequency of the Interferer #1.

% Target Signal definition.
s = zeros(M,N);
v_s = exp(-1i*2*pi*u_s*(0:M-1).')/sqrt(M);  % Target Steering Vector.
s(:,100) = 10^(SNR/20)*v_s;  % Amplitude of Target Signal Generation.

% The uncorrelated unit power thermal noise samples with a Gaussian
% distribution are generated by:
w = (randn(M,N)+1i*randn(M,N))/sqrt(2);

% The interference (Jammer) vectors are generated by:
v_i1 = exp(-1i*2*pi*u_int1*(0:M-1).')/sqrt(M);
i_x1 = 10^(INR1/20)*v_i1*(randn(1,N)+1i*randn(1,N))/sqrt(2);

%The three signals are added to produce the overall array signal.
x = s + i_x1  + w;

iplusn = i_x1 +  w;

% Calculation of the i+n autocorrelation matrix.
R_ipn = 10^(INR1/10)*(v_i1*v_i1')  + eye(M);

InvR = inv(R_ipn);

% MVDR Optimum Beamformer computed for a phi_s = 0 deg.
c_opt = InvR*v_s/(v_s'*InvR*v_s);  %#ok<*MINV>

% Spatial Matched Filter or Steering Vector Beamformer Eq. (11.2.16).
c_mf = v_s;


angle1        = -90:1:90;
Opt_Beam_Pat  = zeros(length(angle1),1);
Conv_Beam_Pat = zeros(length(angle1),1);

for k=1:length(angle1)
    u = (d/lambda)*sin(angle1(k)*pi/180);
    v = exp(-1i*2*pi*u*(0:M-1).')/sqrt(M); % Azimuth Scanning Steering Vector.
    Opt_Beam_Pat(k)  = c_opt'*v;
    Conv_Beam_Pat(k) = c_mf'*v;
end

plot(angle1,10*log10(abs(Conv_Beam_Pat).^2),angle1,10*log10(abs(Opt_Beam_Pat).^2),'r', 'LineWidth',1.5)
xlim([-95 95]);
ylim([-80 0]);
title([
    'Conventional Beamformer (blue) and MVDR Optimum Beamformer (red).';]);
xlim([-90 90]);
xlabel('Angle (deg)');
ylabel('Power (dB)');
grid on;

figure();

subplot(1,2,1);
polardb(angle1.'*pi/180,10*log10(abs(Conv_Beam_Pat).^2),-80,'b');
title('Conventional BF');
grid on;

subplot(1,2,2);
polardb(angle1.'*pi/180,10*log10(abs(Opt_Beam_Pat).^2),-80,'r');
title('MVDR Optimum BF');
grid on;